!obj:pylearn2.train.Train {
    dataset: &train !pkl: "/data/lisatmp2/webbd/columns/datasets/CIFAR10/train_0.pkl",
    model: !obj:pylearn2.models.mlp.MLP {
        batch_size: 128,
        layers: [
                 !obj:pylearn2.models.PretrainedLayerBlock.PretrainedLayerBlock {
                     block_name: 'repr',
                     model_content: !pkl: "/data/lisatmp3/romerosa/compression/teachers/trained_models/CIFAR10/CIFAR10teacher_maxout_aug.pkl",
                     block_output_layer: 1,
                     freeze_params: True
                 },
                 !obj:pylearn2.models.maxout.MaxoutConvC01B {
                     layer_name: 'fitnet_conv0',
                     pad: 2,
                     tied_b: 1,
                     W_lr_scale: .05,
                     b_lr_scale: .05,
                     num_channels: 64,
                     num_pieces: 2,
                     kernel_shape: [3, 3],
                     irange: .005,
                     pool_shape: [1, 1],
                     pool_stride: [1, 1],
                     max_kernel_norm: .9,
                 },
                 !obj:pylearn2.models.maxout.MaxoutConvC01B {
                     layer_name: 'fitnet_conv1',
                     pad: 1,
                     tied_b: 1,
                     W_lr_scale: .05,
                     b_lr_scale: .05,
                     num_channels: 64,
                     num_pieces: 2,
                     kernel_shape: [3, 3],
                     irange: .005,
                     pool_shape: [1, 1],
                     pool_stride: [1, 1],
                     max_kernel_norm: .9,
                 },
                 !obj:pylearn2.models.maxout.MaxoutConvC01B {
                     layer_name: 'fitnet_conv2',
                     pad: 1,
                     tied_b: 1,
                     W_lr_scale: .05,
                     b_lr_scale: .05,
                     num_channels: 64,
                     num_pieces: 2,
                     kernel_shape: [3, 3],
                     pool_shape: [2, 2],
                     pool_stride: [2, 2],
                     irange: .005,
                     max_kernel_norm: .9,
                 },
                 !obj:pylearn2.models.maxout.MaxoutConvC01B {
                     layer_name: 'fitnet_conv3',
                     pad: 1,
                     tied_b: 1,
                     W_lr_scale: .05,
                     b_lr_scale: .05,
                     num_channels: 80,
                     num_pieces: 2,
                     kernel_shape: [3, 3],
                     pool_shape: [1, 1],
                     pool_stride: [1, 1],
                     irange: .005,
                     max_kernel_norm: .9,
                 },
                 !obj:pylearn2.models.maxout.MaxoutConvC01B {
                     layer_name: 'fitnet_conv4',
                     pad: 1,
                     tied_b: 1,
                     W_lr_scale: .05,
                     b_lr_scale: .05,
                     num_channels: 80,
                     num_pieces: 2,
                     kernel_shape: [3, 3],
                     pool_shape: [1, 1],
                     pool_stride: [1, 1],
                     irange: .005,
                     max_kernel_norm: .9,
                 },
                 !obj:pylearn2.models.maxout.MaxoutConvC01B {
                     layer_name: 'fitnet_conv5',
                     pad: 1,
                     tied_b: 1,
                     W_lr_scale: .05,
                     b_lr_scale: .05,
                     num_channels: 80,
                     num_pieces: 2,
                     kernel_shape: [3, 3],
                     pool_shape: [2, 2],
                     pool_stride: [2, 2],
                     irange: .005,
                     max_kernel_norm: .9,
                 },
                 !obj:pylearn2.models.maxout.MaxoutConvC01B {
                     layer_name: 'fitnet_conv6',
                     pad: 1,
                     tied_b: 1,
                     W_lr_scale: .05,
                     b_lr_scale: .05,
                     num_channels: 128,
                     num_pieces: 2,
                     kernel_shape: [3, 3],
                     pool_shape: [1, 1],
                     pool_stride: [1, 1],
                     irange: .005,
                     max_kernel_norm: .9,
                 },
                 !obj:pylearn2.models.maxout.MaxoutConvC01B {
                     layer_name: 'fitnet_conv7',
                     pad: 1,
                     tied_b: 1,
                     W_lr_scale: .05,
                     b_lr_scale: .05,
                     num_channels: 128,
                     num_pieces: 2,
                     kernel_shape: [3, 3],
                     pool_shape: [1, 1],
                     pool_stride: [1, 1],
                     irange: .005,
                     max_kernel_norm: .9,
                 },
                 !obj:pylearn2.models.maxout.MaxoutConvC01B {
                     layer_name: 'fitnet_conv8',
                     pad: 1,
                     tied_b: 1,
                     W_lr_scale: .05,
                     b_lr_scale: .05,
                     num_channels: 128,
                     num_pieces: 2,
                     kernel_shape: [3, 3],
                     pool_shape: [2, 2],
                     pool_stride: [1, 1],
                     irange: .005,
                     max_kernel_norm: .9,
                 },
                 !obj:pylearn2.models.maxout.Maxout {
                    layer_name: 'fitnet_fc1',
                    irange: .005,
                    num_units: 500,
                    num_pieces: 5,
                    max_col_norm: 1.9
                 },
                 !obj:pylearn2.models.mlp.Softmax {
                     max_col_norm: 1.9365,
                     layer_name: 'y',
                     n_classes: 10,
                     irange: .005
                 }
                ],
        input_space: !obj:pylearn2.space.Conv2DSpace {
            shape: &window_shape [32, 32],
            num_channels: 3,
            axes: ['c', 0, 1, 'b'],
        },
    },
    algorithm: !obj:pylearn2.training_algorithms.sgd.SGD {
        learning_rate: .001,
        learning_rule: !obj:pylearn2.training_algorithms.learning_rule.RMSProp        {
          decay: 0.9,
          max_scaling: 100000.0,
        },
        train_iteration_mode: 'even_shuffled_sequential',
        monitor_iteration_mode: 'even_sequential',
        monitoring_dataset:
            {
                'valid' : &valid !pkl: "/data/lisatmp2/webbd/columns/datasets/CIFAR10/valid_0.pkl",
            },
        cost: !obj:FitNets.costs.KDCost.KDCost {
          teacher_path: "/data/lisatmp3/romerosa/compression/teachers/trained_models/CIFAR10/CIFAR10teacher_maxout_aug.pkl",
          temperature: 3,
          lambda_teach: 4,
          hints: [[5,2]],
        },
        termination_criterion: !obj:pylearn2.termination_criteria.Or {
          criteria : [
                      !obj:pylearn2.termination_criteria.EpochCounter {
                          max_epochs: 50
                      },
                      !obj:pylearn2.termination_criteria.MonitorBased {
                          channel_name: "valid_y_misclass",
                          prop_decrease: 0.0,
                          N: 100
                      },
           ]
        }
    },
    extensions: [
        !obj:pylearn2.train_extensions.best_params.MonitorBasedSaveBest {
                channel_name: 'valid_y_misclass',
                save_path: "/data/lisatmp2/webbd/columns/trained_models/CIFAR10/fitnet11_9conv_2fc_best.pkl",
        },
        !obj:pylearn2.train_extensions.window_flip.WindowAndFlip {
            pad_randomized: 8,
            window_shape: *window_shape,
            randomize: [ *train],
            center: [ *valid ]
        },
        !obj:FitNets.extensions.TeacherDecayOverEpoch.TeacherDecayOverEpoch {
            start: 5,
            saturate: 400,
            final_lambda_teach: 1
        },

    ],
    save_path: "/data/lisatmp2/webbd/columns/trained_models/CIFAR10/fitnet11_9conv_2fc.pkl",
    save_freq: 1
}
